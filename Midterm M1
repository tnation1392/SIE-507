#Todd Nason SIE 507 Midterm project

cp = open("carpark.txt","r+") #opens the carpark txt file

def display(file):  # a function to read a file and integrate row numbers and letter headers in the column of the file object
    letters = 'ABCD EFGH'
    print(f'{letters:^15}')
    num = 1
    for line in file:
        if line != '\n':
            print(f'{num:^2} {line:^4}')
            num += 1

def translate(input): #A function to translate the letters from the column into integer coordinates for other functions
    numlet = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7}  #A dictionary that contains the letters and the corresponding integers
    if input in numlet.keys():
        transnum = numlet[input]
        return transnum
    else:
        print("An error has been found!")
        exit(0)

def assign_spot(set,x,y): # A function to open a temporary file with the carpark data and assign a given spot as occupied
    park = open("temp_park.txt","r+")  #Opens the new file for the spot assignment
    spot = set[x][y]
    print(spot)
    if spot == 'O':
        print("Reserving spot....")
        temp = list(set)
        temp[x][y].replace('O','X') #If the spot is available the function replaces the O with an X
        print(temp[x][y])
        print(temp)
        temp = str(temp)
        park.write(temp)
        print("Spot is now reserved!")
        park.close()
    else:
        print("This spot is already taken!")
        park.close()

def reserve(file): # A function to see if a spot is open or search for an open spot, then reserve it
    dataset = []
    for row in file.readlines():  #this will print the file in the form of a list
        if row != '\n':
            if row[-1] == '\n':
                dataset.append(row[0:-1])
            else:
                dataset.append(row)
    print(dataset)

    r, c = (input("Please enter the spot you would like to reserve: "))
    row = int(r)
    print(f'You have entered: {r}{c}') #An input for the spot coordinates

    try:
        if row < -1:
            print("There are no negative rows!")
    except ValueError:
        print("That's not a row number!")
    alph = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
    if c not in alph:
        print("Incorrect column input")
    column = translate(c)  #Uses the translate function to create a numerical coordinate to use
    if dataset[row][column] == "X":
        print("This spot is occupied")
        auto = input("Would you like to search for the closest open spot?: (y/n)")
        if auto == "y":
            current_row = current_column = 0
            max_row = len(dataset)
            max_column = len(dataset[0])

            while current_row <= max_row and current_column <= max_column: #This is the nearest neighbor algorithm
                for x in range(0, current_row):
                    for y in range(0, current_column):
                        if dataset[x][y] == 'O':
                            print("The closest open spot is in",x,y)
                            take = input("Would you like to reserve this spot?: (y/n)")
                            if take == "y":
                                assign_spot(dataset,x,y)
                                exit(0)
                            if take == "n":
                                exit(0)
                current_row += 1
                current_column += 1
        else:
            exit(0)

    if dataset[row][column] == "O":
        print("This spot is available!")
        opp = input("Would you like to reserve this spot?: (y/n)") #Allows the user to reserve the spot if open
        if opp == "y":
            assign_spot(dataset, row, column)
        if opp == "n":
            exit(0)

def statistics(file): # a function to return the percent of the parking lot that is occupied
    contents = file.read()
    total_spots = 80
    Xcount = 0
    for n in contents:
        if n == "X":
            Xcount += 1
    percent = round((Xcount/total_spots) * 100,1)
    print(f'{percent}% of the parking lot is occupied')
def menu():
    text = (print(
        "Select your choice from the menu:", '\n',  #The main menu
        "D to display current status of the car park", '\n',
        "R to reserve an empty slot in the car park", '\n',
        "S to display % occupancy of the car park", '\n',
        "Q to quit",'\n',
        "Input :"))
    return input(text)
def main():
    keep_going = True
    while keep_going == True:
        choice = menu()
        if choice in ("D","d"):
            print('\n')
            display(cp.readlines())  #Uses the display function
        elif choice in ("R","r"):
            reserve(cp)  #Uses the reserve function
        elif choice in ("S","s"):
            print("\n")
            statistics(cp)  #Uses the statistics function
        elif choice in ("Q","q"):
            keep_going == False
        else:
            pass
    else:
        exit(0)
    print("Incorrect input, goodbye")


main()
