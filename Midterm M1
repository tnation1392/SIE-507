#Todd Nason SIE 507 Midterm project
#A program to display a view of the carpark, tell the user how full it is, and reserve a spot via functions
cp = open("carpark.txt", "r+")
def display(file):  # a function to read a file and integrate row numbers and letter headers in the column of the file object
    letters = 'ABCD EFGH'  #The letters to be displayed on top of the columns
    print(f'{letters:^15}')
    num = 1  #A variable to track the row number
    for line in file:
        if line != '\n':
            print(f'{num:^2} {line:^4}')
            num += 1

def translate(input): #A function to translate the letters from the column into integer coordinates for other functions
    numlet = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7}  #A dictionary that contains the letters and the corresponding integers
    if input in numlet.keys():
        transnum = numlet[input]
        return transnum
    else:
        print("An error has been found!")
        exit(0)

def assign_spot(set,x,y): # A function to open a temporary file with the carpark data and assign a given spot as occupied
    park = open("carpark.txt", "w+")
    spot = set[int(x)][int(y)] #A variable that holds the coordinates for the target spot
    if spot == 'O':  #This selects the row where spot is located and replaces the O with an X
        print("Reserving spot....")
        temp_row = list(set[int(x)])
        temp_row[int(y)] = 'X'
        set[int(x)] = ''.join(i for i in temp_row)
    else:
        print("This spot is already taken!")
        main()

    with open("carpark.txt", "w") as final: #This will write the newly updated carpark to the carpark.txt file
        for i, a in enumerate(set):
            print(a, file=final)  #Prints the row and writes it to the carpark.txt file
            if i % 2 != 0:
                print("", file=final)  #Prints the row and writes it to the carpark.txt file
    print("Spot is reserved!")
    park.close()
    main()


def reserve(file): # A function to see if a spot is open or search for an open spot, then reserve it
    dataset = []
    for row in file:  #this will print the file in the form of a list
        if row != '\n':
            if row[-1] == '\n':
                dataset.append(row[0:-1])
            else:
                dataset.append(row)
    print(dataset)
    print('\n')
    r, c = (input("Please enter the spot you would like to reserve (number then letter): "))   #An input for the spot coordinates
    row = int(r)
    print(f'You have entered: {r}{c}')

    try:  #Error handling for the function
        if row < -1:
            print("There are no negative rows!")
    except ValueError:
        print("That's not a row number!")
    alph = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
    if c not in alph:
        print("Incorrect column input")
        main()

    column = translate(c)  #Uses the translate function to create a numerical coordinate to use instead of a letter
    if dataset[row][column] == "X":
        print("This spot is occupied")
        auto = input("Would you like to search for the closest open spot?: (y/n)")  #An input for the nearest neighbor algorithm
        if auto == "y":
            current_row = current_column = 0
            max_row = len(dataset)
            max_column = len(dataset[0])

            while current_row <= max_row and current_column <= max_column: #This is the nearest neighbor algorithm
                for x in range(0, current_row):
                    for y in range(0, current_column):
                        if dataset[x][y] == 'O':
                            print("The closest open spot is in",x,y)
                            take = input("Would you like to reserve this spot?: (y/n)")  #An input to decide whether or not to use the assign_slot function to finalize
                            if take == "y":
                                assign_spot(dataset,x,y)
                                main()
                            if take == "n":
                                main()
                current_row += 1
                current_column += 1
        else:
            main()

    if dataset[row][column] == "O":
        print('\n')
        print("This spot is available!")
        opp = input("Would you like to reserve this spot?: (y/n)") #Allows the user to reserve the spot if open
        if opp == "y":
            assign_spot(dataset, row, column)
            main()
        if opp == "n":
            main()

def statistics(file): # a function to return the percent of the parking lot that is occupied
    contents = file.read()
    total_spots = 80  #The total number of available spots in the lot
    xcount = 0   #A variable to count the number of taken spots
    for n in contents:
        if n == "X":
            xcount += 1
    print(xcount,"spots are occupied out of the 80")
    percent = round((xcount/total_spots) * 100,1)
    return percent

def menu():  #A function to print out the menu options and take an input from the user
    print(
        "\nSelect your choice from the menu:", '\n',  #The main menu
        "D to display current status of the car park", '\n',
        "R to reserve an empty slot in the car park", '\n',
        "S to display % occupancy of the car park", '\n',
        "Q to quit")
    return input("Input: \n")

if __name__ == '__main__':

    def main():  # A function to loop the display menu and call associated functions according to the input from menu()
        keep_going = True
        while keep_going == True:
            choice = menu()
            if choice in ("D", "d"):
                print('You have selected D\n')
                display(cp.readlines())
                cp.seek(0)# Uses the display function
                print('\n')
            elif choice in ("R", "r"):
                print('You have selected R\n')
                reserve(cp)# Uses the reserve function

                cp.seek(0)
                print('\n')
            elif choice in ("S", "s"):
                print("You have selected S\n")
                print(statistics(cp), '% of the parking lot is occupied\n')  # Uses the statistics function
                cp.seek(0)
            elif choice in ("Q", "q"):
                print("Goodbye")
                keep_going = False  # Quits out of the program
            else:
                pass
        else:
            exit(0)
        print("Incorrect input, goodbye")
    main()  #Running the main menu
