import numpy as np
import matplotlib.pyplot as plt

# Todd Nason SIE 507 Assignment 8 Section 1

#1:
print('\n', "QUESTION 1")
randline = np.random.randint(11, 30, size=[6])  #Creates a linear array with 6 integers between 11 and 29
print(randline)

#2:
print('\n', "QUESTION 2")
rand_three = np.random.random(size=[3, 3, 3])  #Creates a 3x3x3 array with random values
print(rand_three)

#3:
print('\n', "QUESTION 3")
rand_five = np.random.random(size=[5, 5])  #Creates a 5x5 array with random values
rand_five = np.array(rand_five)
print(rand_five)
print('\n', "Minimum value:", rand_five.min())  #Prints the minimum value in the array
print("", "Maximum value:", rand_five.max())  #Prints the maximum value in the array

#4:
print('\n', "QUESTION 4")
rand_orig = np.random.random(size=10)  #Creates a 1x10 array with random values
rand_orig = np.array(rand_orig)
rand_sort = np.sort(rand_orig)  #Creates a sorted version of the array
print("Original: ", rand_orig)
print("Sorted: ", rand_sort)

#5:
print('\n', "QUESTION 5")
file_data = np.genfromtxt("aircrafts.csv",dtype=object, delimiter=",", skip_header=1)
  #Creates an array from the aircrafts.csv file
years = np.array(file_data[:,0], dtype=str)  #creates an array with the values from the date column in the file
arrival = np.array(file_data[:,1],dtype=int)  #creates an array with the values from the arrival column
departures = np.array(file_data[:,2], dtype=int)  #creates an array with the values from the departure column

headers = ["Year", "  Arrival ", "Departure"]

  #This section creates lists sliced from the file based on the date, and contains the averages for 
  #arrivals and departures within the year
ten = [2010, np.mean(arrival[0:12]), np.mean(departures[0:12])]
ten = np.round(ten,decimals=2)
eleven = [2011, np.mean(arrival[12:24]), np.mean(departures[12:24])]
eleven = np.round(eleven,decimals=2)
twelve = [2012, np.mean(arrival[24:36]), np.mean(departures[24:36])]
twelve = np.round(twelve,decimals=2)
thirteen = [2013, np.mean(arrival[36:48]), np.mean(departures[36:48])]
thirteen = np.round(thirteen,decimals=2)
fourteen = [2014, np.mean(arrival[48:60]), np.mean(departures[48:60])]
fourteen = np.round(fourteen,decimals=2)
fifteen = [2015, np.mean(arrival[60:72]), np.mean(departures[60:72])]
fifteen = np.round(fifteen,decimals=2)

arr = np.array([headers,ten,eleven,twelve,thirteen,fourteen,fifteen]) #compiles an array of all the created lists
print(arr, sep=" ")

#Part 2

#1:
print("QUESTION 1: See popup graph")
set1 = [1,2,3]
set2 = [2,4,1]

plt.plot(set1, set2)  #plots set 1 and set 2 on a line graph
plt.title("Sample graph")  #title
plt.xlabel("x-axis")  #X-axis label
plt.ylabel("y-axis")  #Y-axis label
plt.show()

#2:
print('\n', "QUESTION 2: See popup graph")
randline = np.random.randint(10, 501, size=[100])  #Creates a 100-character array with random values between 10 and 500
index = range(1,101)
plt.scatter(index,randline)  #Creates a scatter plot of the array
plt.title("Random Distribution of Integers")
plt.xlabel("Integer Index")
plt.ylabel("Integer Value")
plt.show()

#3:
print('\n', "QUESTION 3: Incoming plot!")
finance = np.genfromtxt("f_data.csv", dtype=float, delimiter=",", skip_header=1) #Imports the data from the f_data file
finance = np.array(finance)  #Creates an array from the imported data

month = finance[:,0] #Creating sliced sections of the array to use for different graphs
open = finance[:,1]
high = finance[:,2]
low = finance[:,3]
close = finance[:,4]

#First line
plt.plot(month, open, 'g-', label='Open')
plt.legend()

#Second line
plt.plot(month, high, 'y-', label='High')
plt.legend()

#Third line
plt.plot(month, low, 'b-',label='Low')
plt.legend()

#Fourth line
plt.plot(month, close, 'r-', label='Close')
plt.legend()

plt.title("ABC Inc. Financial Data")
plt.xlabel("Month")
plt.ylabel("Value")
plt.show()

#4:
print('\n', "QUESTION 4: See popup graph")
country = ['China', 'India', 'United States', 'Indonesia', 'Brazil', 'Pakistan', 'Nigeria',
           'Bangladesh', 'Russia', 'Japan']  #A list containing the countries in the dataset

country_pop = [1384, 1296, 329, 262, 208, 207, 203, 159, 142, 126]  #The associated populations of the countries
world_pop = 7537
other = world_pop - sum(country_pop)
percent = []
for x in country_pop:  #This takes the population of each country and finds the percentage of the world population it is
    x = (x/world_pop)*100
    percent.append(x)
other_per = 100 - sum(percent)


#Bar graph
plt.subplot(2,2,1)  #Creates a bar graph showing the listed countries and their associated populations
plt.bar(country, country_pop)
plt.xlabel("Country")
plt.xticks(rotation=45, ha='right')
plt.yticks()
plt.ylabel("Population (Millions)")


#Pie graph
country.append("Rest of world")
percent.append(other_per)
plt.subplot(1,2,2)
colors = ['tab:blue','tab:green','tab:orange','tab:red','tab:purple','tab:pink',
          'tab:olive','tab:cyan']
plt.pie(percent, labels=country, autopct='%1.1f%%', colors=colors)  #Creates a pie chart showing the percentages of world population that each country inhabits
plt.title("Percent of World Population per Country")

plt.show()

#5:
print('\n', "QUESTION 5: See popup graph")
year = [2010, 2011, 2012, 2013,2014,2015]
here = [ten[1],eleven[1],twelve[1],thirteen[1],fourteen[1],fifteen[1]]  #creates a list containing the amound of arrivals annually
there = [ten[2],eleven[2],twelve[2],thirteen[2],fourteen[2],fifteen[2]]  #creates a list containing the amount of departures annually

n = 6
r = np.arange(n)
width = .5

plt.subplot(1,2,1)
plt.bar(r, here, 0.4, label='Arrivals',color='g')  #Creates a bar chart comparing the two list of arrivals and departures
plt.bar(r + width, there, 0.4, label='Departures',color='r')
plt.xlabel("Year")
plt.ylabel("Average Annual Amount")
plt.title("Annual Arrivals and Departures")
plt.legend()

plt.subplot(1,2,2)
plt.scatter(r,here,label="Arrivals")  #Creates a scatter plot that compares the two lists
plt.scatter(r+width,there,label="Departures")
plt.title("Annual Arrivals and Departures")
plt.xlabel("Year")
plt.ylabel("Average Annual Amount")
plt.legend()

plt.show()
